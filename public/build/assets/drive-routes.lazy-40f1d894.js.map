{"version":3,"file":"drive-routes.lazy-40f1d894.js","sources":["../../../resources/client/drive/shareable-link/shareable-link-page/link-page-store.ts","../../../resources/client/drive/shareable-link/queries/use-shareable-link-page.ts","../../../resources/client/drive/shareable-link/shareable-link-page/queries/check-link-password.ts","../../../resources/client/drive/shareable-link/shareable-link-page/queries/import-into-own-drive.ts","../../../resources/client/drive/shareable-link/shareable-link-page/shareable-link-page-action-buttons.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/shareable-link-navbar.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/password-page.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/folder-preview/folder-preview-file-grid.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/folder-preview/folder-preview-file-table.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/folder-preview/use-navigate-to-subfolder.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/folder-preview/folder-preview-file-view.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/folder-preview/folder-preview-breadcrumb.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/folder-preview/folder-preview-header.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/folder-preview/folder-preview.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/shareable-link-page-file-preview.tsx","../../../resources/client/drive/shareable-link/shareable-link-page/shareable-link-page.tsx"],"sourcesContent":["import {create} from 'zustand';\nimport {immer} from 'zustand/middleware/immer';\nimport {DriveSortDescriptor} from '../../drive-store';\nimport {\n  getFromLocalStorage,\n  setInLocalStorage,\n} from '@ui/utils/hooks/local-storage';\n\ninterface LinkPageState {\n  password: string | null;\n  setPassword: (value: string) => void;\n  isPasswordProtected: boolean;\n  setIsPasswordProtected: (value: boolean) => void;\n  activeSort: DriveSortDescriptor;\n  setActiveSort: (value: DriveSortDescriptor) => void;\n  viewMode: 'grid' | 'list';\n  setViewMode: (mode: 'grid' | 'list') => void;\n}\n\nexport const useLinkPageStore = create<LinkPageState>()(\n  immer(set => ({\n    password: null,\n    viewMode: getFromLocalStorage<'list' | 'grid'>('drive.viewMode'),\n    activeSort: {\n      orderBy: 'updated_at',\n      orderDir: 'desc',\n    },\n    setPassword: value => {\n      set(state => {\n        state.password = value;\n      });\n    },\n    isPasswordProtected: false,\n    setIsPasswordProtected: value => {\n      set(state => {\n        state.isPasswordProtected = value;\n      });\n    },\n    setViewMode: mode => {\n      set(state => {\n        state.viewMode = mode;\n        setInLocalStorage('drive.viewMode', mode);\n      });\n    },\n    setActiveSort: value => {\n      set(state => {\n        state.activeSort = value;\n      });\n    },\n  })),\n);\n\nexport function linkPageState() {\n  return useLinkPageStore.getState();\n}\n","import {keepPreviousData, useInfiniteQuery} from '@tanstack/react-query';\nimport {useParams} from 'react-router';\nimport type {FetchShareableLinkResponse} from './use-entry-shareable-link';\nimport type {DriveEntry} from '../../files/drive-entry';\nimport {DriveQueryKeys} from '../../drive-query-keys';\nimport {\n  linkPageState,\n  useLinkPageStore,\n} from '../shareable-link-page/link-page-store';\nimport {LengthAwarePaginationResponse} from '@common/http/backend-response/pagination-response';\nimport {apiClient} from '@common/http/query-client';\nimport {getBootstrapData} from '@ui/bootstrap-data/bootstrap-data-store';\n\nexport interface FetchShareableLinkPageResponse\n  extends FetchShareableLinkResponse {\n  folderChildren: LengthAwarePaginationResponse<DriveEntry>;\n  passwordInvalid: boolean;\n}\n\nexport function useShareableLinkPage() {\n  const {hash} = useParams();\n  const {orderBy, orderDir} = useLinkPageStore(s => s.activeSort);\n  const order = `${orderBy}:${orderDir}`;\n  const isPasswordProtected = useLinkPageStore(s => s.isPasswordProtected);\n  const password = useLinkPageStore(s => s.password);\n\n  const query = useInfiniteQuery({\n    queryKey: DriveQueryKeys.fetchShareableLink({hash, sort: order}),\n    queryFn: async ({pageParam = 1}) => {\n      const response = await fetchLinkByHash({\n        hash: hash!,\n        page: pageParam,\n        order,\n        password,\n      });\n      if (response.passwordInvalid) {\n        linkPageState().setIsPasswordProtected(true);\n      }\n      return response;\n    },\n    initialData: () => {\n      const data = getBootstrapData().loaders?.shareableLinkPage;\n      if (data && data.link?.hash === hash) {\n        if (data.passwordInvalid) {\n          linkPageState().setIsPasswordProtected(true);\n        }\n        return {\n          pageParams: [undefined, 1],\n          pages: [data],\n        };\n      }\n    },\n    initialPageParam: 1,\n    getNextPageParam: lastResponse => {\n      if (!lastResponse.folderChildren) return undefined;\n      const currentPage = lastResponse.folderChildren.current_page;\n      const lastPage = lastResponse.folderChildren.last_page;\n      if (currentPage >= lastPage) {\n        return undefined;\n      }\n      return currentPage + 1;\n    },\n    // disable query if link is password protected and correct\n    // password was not entered yet, to prevent unnecessary requests\n    enabled: (!!hash && !isPasswordProtected) || password != null,\n    placeholderData: keepPreviousData,\n  });\n\n  return {\n    ...query,\n    link: query.data?.pages[0].link,\n    entries: query.data?.pages.flatMap(p => p.folderChildren?.data),\n  };\n}\n\ninterface FetchLinkByHashParams {\n  hash: string;\n  page?: number;\n  order?: string;\n  password?: string | null;\n}\nfunction fetchLinkByHash({\n  hash,\n  page = 1,\n  order,\n  password,\n}: FetchLinkByHashParams): Promise<FetchShareableLinkPageResponse> {\n  return apiClient\n    .get(`shareable-links/${hash}`, {\n      params: {loader: 'shareableLinkPage', page, order, password},\n    })\n    .then(response => response.data);\n}\n","import {useMutation} from '@tanstack/react-query';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {linkPageState} from '../link-page-store';\nimport {apiClient} from '@common/http/query-client';\nimport {showHttpErrorToast} from '@common/http/show-http-error-toast';\nimport {message} from '@ui/i18n/message';\n\ninterface Response extends BackendResponse {\n  matches: boolean;\n}\n\ninterface Props {\n  password: string;\n  linkHash: string;\n}\n\nfunction checkLinkPassword({password, linkHash}: Props): Promise<Response> {\n  return apiClient\n    .post(`shareable-links/${linkHash}/check-password`, {password})\n    .then(r => r.data);\n}\n\nexport function useCheckLinkPassword() {\n  return useMutation({\n    mutationFn: (props: Props) => checkLinkPassword(props),\n    onSuccess: (response, props) => {\n      if (response.matches) {\n        linkPageState().setPassword(props.password);\n      }\n    },\n    onError: err => showHttpErrorToast(err, message('Could not create link')),\n  });\n}\n","import {useMutation} from '@tanstack/react-query';\nimport {BackendResponse} from '@common/http/backend-response/backend-response';\nimport {DriveEntryUser} from '../../../files/drive-entry';\nimport {toast} from '@ui/toast/toast';\nimport {useLinkPageStore} from '../link-page-store';\nimport {apiClient, queryClient} from '@common/http/query-client';\nimport {DriveQueryKeys} from '../../../drive-query-keys';\nimport {message} from '@ui/i18n/message';\nimport {showHttpErrorToast} from '@common/http/show-http-error-toast';\n\ninterface Response extends BackendResponse {\n  users: DriveEntryUser[];\n}\n\ninterface Props {\n  password: string | null;\n  linkId: number;\n}\n\nfunction importIntoOwnDrive({linkId, password}: Props): Promise<Response> {\n  return apiClient\n    .post(`shareable-links/${linkId}/import`, {password})\n    .then(r => r.data);\n}\n\nexport function useImportIntoOwnDrive() {\n  const password = useLinkPageStore(s => s.password);\n  return useMutation({\n    mutationFn: (props: Omit<Props, 'password'>) =>\n      importIntoOwnDrive({...props, password}),\n    onSuccess: async () => {\n      await queryClient.invalidateQueries({\n        queryKey: DriveQueryKeys.fetchShareableLink(),\n      });\n      toast(message('Item imported into your drive'));\n    },\n    onError: err => showHttpErrorToast(err, message('Could not create link')),\n  });\n}\n","import {useShareableLinkPage} from '../queries/use-shareable-link-page';\nimport {useAuth} from '@common/auth/use-auth';\nimport {useFileEntryUrls} from '@common/uploads/file-entry-urls';\nimport {useImportIntoOwnDrive} from './queries/import-into-own-drive';\nimport {Button} from '@ui/buttons/button';\nimport {FileDownloadIcon} from '@ui/icons/material/FileDownload';\nimport {Trans} from '@ui/i18n/trans';\nimport {IconButton} from '@ui/buttons/icon-button';\nimport {KeyboardArrowDownIcon} from '@ui/icons/material/KeyboardArrowDown';\nimport {ImportExportIcon} from '@ui/icons/material/ImportExport';\nimport React, {Fragment} from 'react';\nimport {Tooltip} from '@ui/tooltip/tooltip';\nimport {Menu, MenuItem, MenuTrigger} from '@ui/menu/menu-trigger';\nimport {downloadFileFromUrl} from '@ui/utils/files/download-file-from-url';\n\nexport function ShareableLinkPageActionButtons() {\n  const {link} = useShareableLinkPage();\n  const {user, isLoggedIn} = useAuth();\n  const {downloadUrl} = useFileEntryUrls(link?.entry);\n  const importIntoOwnDrive = useImportIntoOwnDrive();\n  const alreadyImported = link?.entry?.users!.find(u => u.id === user?.id);\n\n  if (!link?.entry) return null;\n\n  return (\n    <div>\n      {link.allow_download && <DownloadButton downloadUrl={downloadUrl} />}\n      {!alreadyImported && isLoggedIn && link.allow_edit && (\n        <MenuTrigger\n          onItemSelected={key => {\n            if (key === 'import') {\n              importIntoOwnDrive.mutate({linkId: link.id});\n            } else if (key === 'download') {\n              if (downloadUrl) {\n                downloadFileFromUrl(downloadUrl);\n              }\n            }\n          }}\n        >\n          <IconButton className=\"ml-6\" disabled={importIntoOwnDrive.isPending}>\n            <KeyboardArrowDownIcon />\n          </IconButton>\n          <Menu>\n            <MenuItem value=\"download\" startIcon={<FileDownloadIcon />}>\n              <Trans message=\"Download\" />\n            </MenuItem>\n            <MenuItem value=\"import\" startIcon={<ImportExportIcon />}>\n              <Trans message=\"Save a copy to your own drive\" />\n            </MenuItem>\n          </Menu>\n        </MenuTrigger>\n      )}\n    </div>\n  );\n}\n\ninterface DownloadButtonProps {\n  downloadUrl: string | undefined;\n}\nfunction DownloadButton({downloadUrl}: DownloadButtonProps) {\n  return (\n    <Fragment>\n      <Tooltip label={<Trans message=\"Download\" />}>\n        <IconButton\n          className=\"md:hidden\"\n          onClick={() => {\n            if (downloadUrl) {\n              downloadFileFromUrl(downloadUrl);\n            }\n          }}\n        >\n          <FileDownloadIcon />\n        </IconButton>\n      </Tooltip>\n      <Button\n        className=\"max-md:hidden\"\n        size=\"sm\"\n        variant=\"flat\"\n        color=\"chip\"\n        startIcon={<FileDownloadIcon />}\n        onClick={() => {\n          if (downloadUrl) {\n            downloadFileFromUrl(downloadUrl);\n          }\n        }}\n      >\n        <Trans message=\"Download\" />\n      </Button>\n    </Fragment>\n  );\n}\n","import React from 'react';\nimport {Navbar} from '@common/ui/navigation/navbar/navbar';\nimport {useShareableLinkPage} from '../queries/use-shareable-link-page';\nimport {ShareableLinkPageActionButtons} from './shareable-link-page-action-buttons';\nimport {useIsMobileMediaQuery} from '@ui/utils/hooks/is-mobile-media-query';\nimport {FileTypeIcon} from '@common/uploads/components/file-type-icon/file-type-icon';\n\nexport function ShareableLinkNavbar() {\n  const {link} = useShareableLinkPage();\n  const isMobile = useIsMobileMediaQuery();\n  return (\n    <Navbar\n      size=\"md\"\n      color=\"bg\"\n      className=\"flex-shrink-0\"\n      rightChildren={link?.entry && <ShareableLinkPageActionButtons />}\n      menuPosition=\"shareable-link-page\"\n      hideLogo={isMobile}\n    >\n      {link?.entry && link.entry.type !== 'folder' && (\n        <div className=\"fex-auto flex min-w-0 items-center gap-10\">\n          <FileTypeIcon className=\"flex-shrink-0\" type={link.entry.type} />\n          <div className=\"flex-auto overflow-hidden overflow-ellipsis whitespace-nowrap font-medium\">\n            {link.entry.name}\n          </div>\n        </div>\n      )}\n    </Navbar>\n  );\n}\n","import {useState} from 'react';\nimport {TextField} from '@ui/forms/input-field/text-field/text-field';\nimport {Button} from '@ui/buttons/button';\nimport {useCheckLinkPassword} from './queries/check-link-password';\nimport {Trans} from '@ui/i18n/trans';\nimport {useTrans} from '@ui/i18n/use-trans';\nimport {ShareableLinkNavbar} from './shareable-link-navbar';\nimport {useParams} from 'react-router';\nimport secureFilesSvg from '@common/auth/ui/account-settings/access-token-panel/secure-files.svg';\nimport {SvgImage} from '@ui/images/svg-image';\n\nexport function PasswordPage() {\n  const {trans} = useTrans();\n  const {hash} = useParams();\n  const fieldLabel = trans({message: 'Password'});\n  const [password, setPassword] = useState<string>('');\n  const checkPassword = useCheckLinkPassword();\n  const linkHash = hash ? hash.split(':')[0] : null;\n\n  const passwordIsInvalid = checkPassword.data && !checkPassword.data.matches;\n\n  return (\n    <div className=\"flex h-screen flex-col bg-alt\">\n      <ShareableLinkNavbar />\n      <div className=\"mx-auto my-80 px-10 md:px-20\">\n        <div className=\"flex max-w-[560px] flex-col items-center gap-40 rounded border bg p-24 md:flex-row md:gap-14\">\n          <div className=\"h-132 w-[165px]\">\n            <SvgImage src={secureFilesSvg} />\n          </div>\n          <form\n            onSubmit={e => {\n              e.preventDefault();\n              checkPassword.mutate({\n                linkHash: linkHash!,\n                password,\n              });\n            }}\n          >\n            <span className=\"text-sm\">\n              <Trans message=\"The link you are trying to access is password protected.\" />\n            </span>\n            <TextField\n              autoFocus\n              placeholder={fieldLabel}\n              aria-label={fieldLabel}\n              className=\"mb-20 mt-10\"\n              type=\"password\"\n              value={password}\n              required\n              errorMessage={\n                passwordIsInvalid && <Trans message=\"Password is not valid\" />\n              }\n              onChange={e => {\n                setPassword(e.target.value);\n              }}\n            />\n            <div className=\"text-right\">\n              <Button\n                variant=\"flat\"\n                color=\"primary\"\n                type=\"submit\"\n                className=\"w-full md:w-auto\"\n                disabled={checkPassword.isPending}\n              >\n                <Trans message=\"Enter\" />\n              </Button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import {BaseFileGridItem} from '../../../file-view/file-grid/base-file-grid-item';\nimport React from 'react';\nimport {DriveEntry} from '../../../files/drive-entry';\n\nexport interface FolderPreviewGridProps {\n  entries: DriveEntry[];\n  onEntrySelected: (entry: DriveEntry, index: number) => void;\n}\nexport function FolderPreviewFileGrid({\n  entries,\n  onEntrySelected,\n}: FolderPreviewGridProps) {\n  return (\n    <div className=\"file-grid\">\n      {entries.map((entry, index) => (\n        <BaseFileGridItem\n          tabIndex={-1}\n          className=\"hover:shadow-md cursor-pointer bg\"\n          entry={entry}\n          key={entry.id}\n          onContextMenu={e => {\n            e.preventDefault();\n          }}\n          onKeyDown={e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              onEntrySelected(entry, index);\n            }\n          }}\n          onClick={() => {\n            onEntrySelected(entry, index);\n          }}\n        />\n      ))}\n    </div>\n  );\n}\n","import {DriveSortDescriptor} from '@app/drive/drive-store';\nimport React from 'react';\nimport {Table} from '@common/ui/tables/table';\nimport {\n  linkPageState,\n  useLinkPageStore,\n} from '@app/drive/shareable-link/shareable-link-page/link-page-store';\nimport type {FolderPreviewGridProps} from '@app/drive/shareable-link/shareable-link-page/folder-preview/folder-preview-file-grid';\nimport {fileTableColumns} from '@app/drive/file-view/file-table/file-table-columns';\nimport {useIsMobileMediaQuery} from '@ui/utils/hooks/is-mobile-media-query';\n\nconst mobileColumns = fileTableColumns.filter(\n  config => config.key !== 'updated_at',\n);\n\nexport function FolderPreviewFileTable({\n  entries,\n  onEntrySelected,\n}: FolderPreviewGridProps) {\n  const sortDescriptor = useLinkPageStore(s => s.activeSort);\n  const isMobile = useIsMobileMediaQuery();\n\n  return (\n    <Table\n      columns={isMobile ? mobileColumns : fileTableColumns}\n      data={entries}\n      sortDescriptor={sortDescriptor}\n      onSortChange={value => {\n        linkPageState().setActiveSort(value as DriveSortDescriptor);\n      }}\n      onAction={(item, index) => {\n        onEntrySelected(item, index);\n      }}\n      enableSelection={false}\n    />\n  );\n}\n","import {useShareableLinkPage} from '../../queries/use-shareable-link-page';\nimport {useNavigate} from 'react-router';\nimport {ShareableLink} from '../../shareable-link';\n\nfunction buildFolderHash(link: ShareableLink, folderHash?: string) {\n  let hash = link.hash;\n  if (folderHash && link.entry?.hash !== folderHash) {\n    hash = `${hash}:${folderHash}`;\n  }\n  return hash;\n}\n\nexport function useNavigateToSubfolder() {\n  const {link} = useShareableLinkPage();\n  const navigate = useNavigate();\n  return (hash: string) => {\n    if (!link) return;\n    navigate(`/drive/s/${buildFolderHash(link, hash)}`);\n  };\n}\n","import {AnimatePresence, m} from 'framer-motion';\nimport React, {useEffect, useRef, useState} from 'react';\nimport {ProgressCircle} from '@ui/progress/progress-circle';\nimport {useShareableLinkPage} from '../../queries/use-shareable-link-page';\nimport {DialogTrigger} from '@ui/overlays/dialog/dialog-trigger';\nimport clsx from 'clsx';\nimport {DriveEntry} from '../../../files/drive-entry';\nimport {FolderPreviewFileGrid} from './folder-preview-file-grid';\nimport {useLinkPageStore} from '../link-page-store';\nimport {FolderPreviewFileTable} from './folder-preview-file-table';\nimport {useNavigateToSubfolder} from './use-navigate-to-subfolder';\nimport {useLocation} from 'react-router';\nimport {AdHost} from '@common/admin/ads/ad-host';\nimport {opacityAnimation} from '@ui/animation/opacity-animation';\nimport {FilePreviewDialog} from '@common/uploads/components/file-preview/file-preview-dialog';\n\ninterface FolderPreviewChildrenProps {\n  className?: string;\n}\nexport function FolderPreviewFileView({className}: FolderPreviewChildrenProps) {\n  const {pathname} = useLocation();\n  const navigateToSubfolder = useNavigateToSubfolder();\n  const [activePreviewIndex, setActivePreviewIndex] = useState<number>();\n  const viewMode = useLinkPageStore(s => s.viewMode);\n  const sentinelRef = useRef<HTMLDivElement>(null);\n  const {\n    link,\n    entries,\n    isFetchingNextPage,\n    hasNextPage,\n    fetchNextPage,\n    isPlaceholderData,\n  } = useShareableLinkPage();\n\n  // close preview modal on back/forward navigation\n  useEffect(() => {\n    setActivePreviewIndex(undefined);\n  }, [pathname]);\n\n  useEffect(() => {\n    const sentinelEl = sentinelRef.current;\n    if (!sentinelEl) return;\n    const observer = new IntersectionObserver(([entry]) => {\n      if (entry.isIntersecting && hasNextPage) {\n        fetchNextPage();\n      }\n    });\n    observer.observe(sentinelEl);\n    return () => {\n      observer.unobserve(sentinelEl);\n    };\n  }, [hasNextPage, fetchNextPage]);\n\n  if (!link || isPlaceholderData) {\n    return (\n      <div className={clsx('flex justify-center', className)}>\n        <ProgressCircle isIndeterminate />\n      </div>\n    );\n  }\n\n  const handlePreview = (entry: DriveEntry, index: number) => {\n    if (entry.type === 'folder') {\n      navigateToSubfolder(entry.hash);\n    } else {\n      setActivePreviewIndex(index);\n    }\n  };\n\n  const folderEntries = entries || [];\n\n  return (\n    <>\n      <div\n        className={clsx(\n          'file-grid-container flex-auto overflow-auto px-14 pb-14 md:px-24 md:pb-24',\n          className,\n        )}\n      >\n        <AdHost slot=\"file-preview\" className=\"mb-40\" />\n        {viewMode === 'grid' ? (\n          <FolderPreviewFileGrid\n            entries={folderEntries}\n            onEntrySelected={handlePreview}\n          />\n        ) : (\n          <FolderPreviewFileTable\n            entries={folderEntries}\n            onEntrySelected={handlePreview}\n          />\n        )}\n        <span ref={sentinelRef} aria-hidden />\n        <AnimatePresence>\n          {isFetchingNextPage && (\n            <m.div\n              className=\"mt-24 flex w-full justify-center\"\n              {...opacityAnimation}\n            >\n              <ProgressCircle isIndeterminate aria-label=\"loading\" />\n            </m.div>\n          )}\n        </AnimatePresence>\n      </div>\n      <DialogTrigger\n        type=\"modal\"\n        isOpen={activePreviewIndex != undefined}\n        onClose={() => setActivePreviewIndex(undefined)}\n      >\n        <FilePreviewDialog\n          entries={folderEntries}\n          defaultActiveIndex={activePreviewIndex}\n          allowDownload={link.allow_download}\n        />\n      </DialogTrigger>\n    </>\n  );\n}\n","import React, {ReactElement, ReactNode} from 'react';\nimport clsx from 'clsx';\nimport {DriveFolder} from '../../../files/drive-entry';\nimport {useFolderPath} from '../../../files/queries/use-folder-path';\nimport {Breadcrumb} from '@ui/breadcrumbs/breadcrumb';\nimport {ShareableLink} from '../../shareable-link';\nimport {useLinkPageStore} from '../link-page-store';\nimport {BreadcrumbItem} from '@ui/breadcrumbs/breadcrumb-item';\nimport {useNavigateToSubfolder} from './use-navigate-to-subfolder';\n\ninterface Props {\n  className?: string;\n  folder?: DriveFolder;\n  link: ShareableLink;\n}\nexport function FolderPreviewBreadcrumb({className, folder, link}: Props) {\n  const navigateToSubfolder = useNavigateToSubfolder();\n  const password = useLinkPageStore(s => s.password);\n  const query = useFolderPath({\n    hash: folder?.hash,\n    params: {\n      shareable_link: link.id,\n      password,\n    },\n  });\n\n  let content: ReactNode;\n\n  if (query.isLoading) {\n    content = null;\n  } else {\n    const items: {folder: DriveFolder; label: ReactElement}[] = [];\n    if (query.data) {\n      query.data.path.forEach(parent => {\n        items.push({\n          folder: parent,\n          label: <>{parent.name}</>,\n        });\n      });\n    }\n\n    content = (\n      <Breadcrumb size=\"lg\" isNavigation>\n        {items.map(item => {\n          return (\n            <BreadcrumbItem\n              onSelected={() => {\n                navigateToSubfolder(item.folder.hash);\n              }}\n              key={item.folder.hash}\n            >\n              {item.label}\n            </BreadcrumbItem>\n          );\n        })}\n      </Breadcrumb>\n    );\n  }\n\n  return <div className={clsx('h-36 flex-shrink-0', className)}>{content}</div>;\n}\n","import React from 'react';\nimport {FolderPreviewBreadcrumb} from './folder-preview-breadcrumb';\nimport {EntriesSortButton} from '../../../layout/sorting/entries-sort-button';\nimport {linkPageState, useLinkPageStore} from '../link-page-store';\nimport {IconButton} from '@ui/buttons/icon-button';\nimport {GridViewIcon} from '@ui/icons/material/GridView';\nimport {useShareableLinkPage} from '../../queries/use-shareable-link-page';\nimport {DriveFolder} from '../../../files/drive-entry';\n\nexport function FolderPreviewHeader() {\n  const activeSort = useLinkPageStore(s => s.activeSort);\n  const {link, isFetching} = useShareableLinkPage();\n  const hasEntry = link && link.entry;\n\n  return (\n    <div className=\"flex flex-col justify-between gap-14 p-14 md:h-90 md:flex-row md:items-center md:p-24\">\n      {hasEntry && (\n        <FolderPreviewBreadcrumb\n          link={link}\n          folder={link.entry as DriveFolder}\n          className=\"flex-auto\"\n        />\n      )}\n      {hasEntry && (\n        <div className=\"flex items-center justify-between text-muted md:justify-start\">\n          <EntriesSortButton\n            isDisabled={isFetching}\n            descriptor={activeSort}\n            onChange={value => {\n              linkPageState().setActiveSort(value);\n            }}\n          />\n          <div className=\"ml-10 md:border-l md:pl-10\">\n            <IconButton\n              onClick={() => {\n                linkPageState().setViewMode(\n                  linkPageState().viewMode === 'grid' ? 'list' : 'grid',\n                );\n              }}\n            >\n              <GridViewIcon />\n            </IconButton>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React from 'react';\r\nimport {useShareableLinkPage} from '../../queries/use-shareable-link-page';\r\nimport {FolderPreviewFileView} from './folder-preview-file-view';\r\nimport {Trans} from '@ui/i18n/trans';\r\nimport {FileUploadProvider} from '@common/uploads/uploader/file-upload-provider';\r\nimport {ShareableLinkPageActionButtons} from '../shareable-link-page-action-buttons';\r\nimport {FolderPreviewHeader} from './folder-preview-header';\r\nimport shareSvg from './share.svg';\r\nimport clsx from 'clsx';\r\nimport {DashboardLayout} from '@common/ui/dashboard-layout/dashboard-layout';\r\nimport {DashboardNavbar} from '@common/ui/dashboard-layout/dashboard-navbar';\r\nimport {DashboardContentHeader} from '@common/ui/dashboard-layout/dashboard-content-header';\r\nimport {DashboardContent} from '@common/ui/dashboard-layout/dashboard-content';\r\nimport {IllustratedMessage} from '@ui/images/illustrated-message';\r\nimport {SvgImage} from '@ui/images/svg-image';\r\n\r\nexport function FolderPreview() {\r\n  const {entries, isFetched} = useShareableLinkPage();\r\n  const showEmptyMessage = isFetched && !entries?.length;\r\n\r\n  return (\r\n    <DashboardLayout name=\"folder-preview\">\r\n      <DashboardNavbar\r\n        hideToggleButton\r\n        rightChildren={<ShareableLinkPageActionButtons />}\r\n        color=\"bg\"\r\n      />\r\n      <DashboardContentHeader>\r\n        <FolderPreviewHeader />\r\n      </DashboardContentHeader>\r\n      <FileUploadProvider>\r\n        <DashboardContent>\r\n          {showEmptyMessage ? <EmptyMessage /> : <FolderPreviewFileView />}\r\n        </DashboardContent>\r\n      </FileUploadProvider>\r\n    </DashboardLayout>\r\n  );\r\n}\r\n\r\ninterface EmptyMessageProps {\r\n  className?: string;\r\n}\r\nfunction EmptyMessage({className}: EmptyMessageProps) {\r\n  return (\r\n    <IllustratedMessage\r\n      className={clsx(className, 'mt-80')}\r\n      image={<SvgImage src={shareSvg} />}\r\n      title={<Trans message=\"Folder is empty\" />}\r\n      description={\r\n        <Trans message=\"No files have been uploaded to this folder yet\" />\r\n      }\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport {useShareableLinkPage} from '../queries/use-shareable-link-page';\r\nimport {ShareableLinkNavbar} from './shareable-link-navbar';\r\nimport {AdHost} from '@common/admin/ads/ad-host';\r\nimport {FilePreviewContainer} from '@common/uploads/components/file-preview/file-preview-container';\r\n\r\nexport function ShareableLinkPageFilePreview() {\r\n  const {link} = useShareableLinkPage();\r\n\r\n  if (!link?.entry) return null;\r\n\r\n  return (\r\n    <div className=\"flex h-screen flex-col bg-alt\">\r\n      <ShareableLinkNavbar />\r\n      <AdHost slot=\"file-preview\" className=\"mx-auto mt-24\" />\r\n      <FilePreviewContainer\r\n        entries={[link.entry]}\r\n        showHeader={false}\r\n        allowDownload={link.allow_download}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, {ReactElement} from 'react';\nimport {useShareableLinkPage} from '@app/drive/shareable-link/queries/use-shareable-link-page';\nimport {useLinkPageStore} from '@app/drive/shareable-link/shareable-link-page/link-page-store';\nimport {useTrans} from '@ui/i18n/use-trans';\nimport {ProgressCircle} from '@ui/progress/progress-circle';\nimport {PasswordPage} from '@app/drive/shareable-link/shareable-link-page/password-page';\nimport {FolderPreview} from '@app/drive/shareable-link/shareable-link-page/folder-preview/folder-preview';\nimport {ShareableLinkPageFilePreview} from './shareable-link-page-file-preview';\nimport {NotFoundPage} from '@common/ui/not-found-page/not-found-page';\nimport {FileEntryUrlsContext} from '@common/uploads/file-entry-urls';\nimport {ActiveWorkspaceProvider} from '@common/workspace/active-workspace-id-context';\n\nexport function ShareableLinkPage() {\n  const {status, link} = useShareableLinkPage();\n  const {trans} = useTrans();\n  const isPasswordProtected = useLinkPageStore(s => s.isPasswordProtected);\n  const password = useLinkPageStore(s => s.password);\n\n  let content: ReactElement;\n\n  if (status === 'pending') {\n    content = (\n      <div className=\"flex h-screen flex-auto items-center justify-center\">\n        <ProgressCircle\n          aria-label={trans({message: 'Loading link'})}\n          isIndeterminate\n        />\n      </div>\n    );\n  } else if (!link && !isPasswordProtected) {\n    return <NotFoundPage />;\n  } else if (isPasswordProtected && !password) {\n    content = <PasswordPage />;\n  } else if (link?.entry?.type === 'folder') {\n    content = <FolderPreview />;\n  } else {\n    content = <ShareableLinkPageFilePreview />;\n  }\n\n  return (\n    <ActiveWorkspaceProvider>\n      <FileEntryUrlsContext.Provider\n        value={{shareable_link: link?.id, password}}\n      >\n        {content}\n      </FileEntryUrlsContext.Provider>\n    </ActiveWorkspaceProvider>\n  );\n}\n"],"names":["useLinkPageStore","create","immer","set","getFromLocalStorage","value","state","mode","setInLocalStorage","linkPageState","useShareableLinkPage","hash","useParams","orderBy","orderDir","s","order","isPasswordProtected","password","query","useInfiniteQuery","DriveQueryKeys","pageParam","response","fetchLinkByHash","data","_a","getBootstrapData","_b","lastResponse","currentPage","lastPage","keepPreviousData","p","page","apiClient","checkLinkPassword","linkHash","r","useCheckLinkPassword","useMutation","props","err","showHttpErrorToast","message","importIntoOwnDrive","linkId","useImportIntoOwnDrive","queryClient","toast","ShareableLinkPageActionButtons","link","user","isLoggedIn","useAuth","downloadUrl","useFileEntryUrls","alreadyImported","u","jsx","DownloadButton","jsxs","MenuTrigger","key","downloadFileFromUrl","IconButton","KeyboardArrowDownIcon","Menu","MenuItem","FileDownloadIcon","Trans","ImportExportIcon","Fragment","Tooltip","Button","ShareableLinkNavbar","isMobile","useIsMobileMediaQuery","Navbar","FileTypeIcon","PasswordPage","trans","useTrans","fieldLabel","setPassword","useState","checkPassword","passwordIsInvalid","SvgImage","secureFilesSvg","e","TextField","FolderPreviewFileGrid","entries","onEntrySelected","entry","index","BaseFileGridItem","mobileColumns","fileTableColumns","config","FolderPreviewFileTable","sortDescriptor","Table","item","buildFolderHash","folderHash","useNavigateToSubfolder","navigate","useNavigate","FolderPreviewFileView","className","pathname","useLocation","navigateToSubfolder","activePreviewIndex","setActivePreviewIndex","viewMode","sentinelRef","useRef","isFetchingNextPage","hasNextPage","fetchNextPage","isPlaceholderData","useEffect","sentinelEl","observer","clsx","ProgressCircle","handlePreview","folderEntries","AdHost","AnimatePresence","m","opacityAnimation","DialogTrigger","FilePreviewDialog","FolderPreviewBreadcrumb","folder","useFolderPath","content","items","parent","Breadcrumb","BreadcrumbItem","FolderPreviewHeader","activeSort","isFetching","hasEntry","EntriesSortButton","GridViewIcon","FolderPreview","isFetched","showEmptyMessage","DashboardLayout","DashboardNavbar","DashboardContentHeader","FileUploadProvider","DashboardContent","EmptyMessage","IllustratedMessage","shareSvg","ShareableLinkPageFilePreview","FilePreviewContainer","ShareableLinkPage","status","NotFoundPage","ActiveWorkspaceProvider","FileEntryUrlsContext"],"mappings":"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"}